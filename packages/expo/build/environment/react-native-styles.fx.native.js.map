{"version":3,"file":"react-native-styles.fx.native.js","sourceRoot":"","sources":["../../src/environment/react-native-styles.fx.native.ts"],"names":[],"mappings":"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","sourcesContent":["// To improve performance, React Native styles are not well type-checked, but this\n// often leads to fatal native crashes (e.g. no indication of what happened).\n// To combat this, development-only assertions are added for known style issues.\n// - Unsupported web styles, e.g. CSS Grid, CSS Transitions, CSS Animations, CSS Backgrounds, etc.\n// - Invalid numeric units, e.g. rem, em, px, cm, mm, in, px, pt, pc, ch, ex, vw, vh, vmin, vmax, etc.\nimport { Platform } from 'react-native';\nimport ReactNativeStyleAttributes from 'react-native/Libraries/Components/View/ReactNativeStyleAttributes';\n\n// Prevent errors / warnings by going directly to the source.\n// This should be done after React dev tools is setup, otherwise\n// the unsupported properties are registered as being valid options.\nfunction setStyleAttributePreprocessor(property: string, process: (value: any) => any) {\n  // Unlike `StyleSheet.setStyleAttributePreprocessor`, this will prevent warnings from being thrown.\n  Object.defineProperty(ReactNativeStyleAttributes, property, {\n    get() {\n      return {\n        process,\n      };\n    },\n  });\n}\n\n// Everything here is removed in production bundles.\nif (process.env.NODE_ENV === 'development') {\n  const PLATFORM_NAME = Platform.select({\n    ios: 'iOS',\n    android: 'Android',\n    default: Platform.OS,\n  });\n\n  // Mostly based on react-native-web:\n  // https://github.com/necolas/react-native-web/blob/1aa84d54479fb64e77c86d064263144370195f86/packages/react-native-web/src/types/styles.js\n  const CSS_GRID = [\n    'grid',\n    'gridArea',\n    'gridAutoColumns',\n    'gridAutoFlow',\n    'gridAutoRows',\n    'gridColumn',\n    'gridColumnEnd',\n    'gridColumnGap',\n    'gridColumnStart',\n    'gridRow',\n    'gridRowEnd',\n    'gridRowGap',\n    'gridRowStart',\n    'gridTemplateColumns',\n    'gridTemplateRows',\n    'gridTemplateAreas',\n  ];\n\n  const CSS_TRANSITIONS = [\n    'transitionDelay',\n    'transitionDuration',\n    'transitionProperty',\n    'transitionTimingFunction',\n  ];\n\n  const CSS_ANIMATION = [\n    'animationDelay',\n    'animationDirection',\n    'animationDuration',\n    'animationFillMode',\n    'animationIterationCount',\n    'animationKeyframes',\n    'animationName',\n    'animationPlayState',\n    'animationTimingFunction',\n  ];\n\n  const CSS_BACKGROUND = [\n    'backgroundAttachment',\n    'backgroundBlendMode',\n    'backgroundClip',\n    'backgroundImage',\n    'backgroundOrigin',\n    'backgroundPosition',\n    'backgroundRepeat',\n    'backgroundSize',\n  ];\n\n  // This list may need to be updated as the following issue progresses:\n  // https://github.com/facebook/react-native/issues/34425/\n\n  // Keep a close eye on the existing list of processors:\n  // https://github.com/facebook/react-native/blob/main/Libraries/Components/View/ReactNativeStyleAttributes.js#L21\n  const WEB_STYLES = [\n    'backdropFilter',\n    'boxShadow',\n    'boxSizing',\n    'clip',\n    'cursor',\n    'filter',\n    'outline',\n    'outlineColor',\n    'overflowX',\n    'overflowY',\n    'overscrollBehavior',\n    'overscrollBehaviorX',\n    'overscrollBehaviorY',\n    'perspective',\n    'perspectiveOrigin',\n    'touchAction',\n    'transformOrigin',\n    'transformStyle',\n    'visibility',\n    'willChange',\n  ];\n\n  const UNSUPPORTED_STYLES = [\n    { props: CSS_GRID, message: 'CSS Grid' },\n    { props: CSS_TRANSITIONS, message: 'CSS Transition' },\n    { props: CSS_ANIMATION, message: 'CSS Animation' },\n    { props: CSS_BACKGROUND, message: 'CSS Background' },\n    { props: WEB_STYLES, message: 'CSS Style' },\n  ];\n\n  for (const { props, message } of UNSUPPORTED_STYLES) {\n    for (const prop of props) {\n      if (\n        // Allows users to keep custom properties\n        !ReactNativeStyleAttributes[prop] ||\n        // Allow overwriting the process method if it's `__yoga_assertUnsupportedStyle__`\n        ReactNativeStyleAttributes[prop]?.process?.name === '__yoga_assertUnsupportedStyle__'\n      ) {\n        // eslint-disable-next-line no-inner-declarations\n        function assertUnsupportedStyle(value: any): undefined {\n          const errorMessage = [\n            `${message} property \"${prop}\" is not currently supported on ${PLATFORM_NAME}.`,\n            `style={{ ${prop}: '${value}' }}`,\n            `This is a development error, production use may lead to fatal crashes.`,\n          ];\n          // Use console.error instead of throwing so devs can see more than one issue at a time.\n          console.error(errorMessage.join('\\n'));\n          return undefined;\n        }\n        assertUnsupportedStyle.name = '__yoga_assertUnsupportedStyle__';\n        // Prevent errors / warnings by going directly to the source.\n        // This should be done after React dev tools is setup, otherwise\n        // the unsupported properties are registered as being valid options.\n        setStyleAttributePreprocessor(prop, assertUnsupportedStyle);\n      }\n    }\n  }\n\n  // `position: fixed` is extremely common in web development, but it's not supported in React Native.\n  // We should ensure developers are warned about this in development mode.\n  setStyleAttributePreprocessor('position', (value) => {\n    if (['absolute', 'relative', undefined].includes(value)) {\n      return value;\n    }\n    console.error(\n      `CSS Position value \"${value}\" is not currently supported on ${PLATFORM_NAME}. This is a development error, production use may lead to fatal crashes. From: position: '${value}'`\n    );\n    // Pass `relative` to prevent fatal errors from crashing the app\n    // before the dev has a chance to see the error.\n    return 'relative';\n  });\n\n  // A list of existing properties that would commonly be passed a CSS unit.\n  // We could parse most numeric values in JS but we should probably avoid that in favor of Yoga native support.\n  // List created by copying the existing styles and removing\n  // any value that isn't denoted numerically https://github.com/facebook/react-native/blob/main/Libraries/Components/View/ReactNativeStyleAttributes.js#L21\n  const NUMERIC_STYLES = [\n    'borderBottomWidth',\n    'borderEndWidth',\n    'borderLeftWidth',\n    'borderRightWidth',\n    'borderStartWidth',\n    'borderTopWidth',\n    'columnGap',\n    'borderWidth',\n    'bottom',\n    'end',\n    'gap',\n    'height',\n    'inset',\n    'insetBlock',\n    'insetBlockEnd',\n    'insetBlockStart',\n    'insetInline',\n    'insetInlineEnd',\n    'insetInlineStart',\n    'left',\n    'margin',\n    'marginBlock',\n    'marginBlockEnd',\n    'marginBlockStart',\n    'marginBottom',\n    'marginEnd',\n    'marginHorizontal',\n    'marginInline',\n    'marginInlineEnd',\n    'marginInlineStart',\n    'marginLeft',\n    'marginRight',\n    'marginStart',\n    'marginTop',\n    'marginVertical',\n    'maxHeight',\n    'maxWidth',\n    'minHeight',\n    'minWidth',\n    'padding',\n    'paddingBlock',\n    'paddingBlockEnd',\n    'paddingBlockStart',\n    'paddingBottom',\n    'paddingEnd',\n    'paddingHorizontal',\n    'paddingInline',\n    'paddingInlineEnd',\n    'paddingInlineStart',\n    'paddingLeft',\n    'paddingRight',\n    'paddingStart',\n    'paddingTop',\n    'paddingVertical',\n    'position',\n    'right',\n    'rowGap',\n    'start',\n    'top',\n    'width',\n    'zIndex',\n    'shadowOpacity',\n    'borderBottomEndRadius',\n    'borderBottomLeftRadius',\n    'borderBottomRightRadius',\n    'borderBottomStartRadius',\n    'borderEndEndRadius',\n    'borderEndStartRadius',\n    'borderRadius',\n    'borderStartEndRadius',\n    'borderStartStartRadius',\n    'borderTopEndRadius',\n    'borderTopLeftRadius',\n    'borderTopRightRadius',\n    'borderTopStartRadius',\n    'opacity',\n    'fontSize',\n    'letterSpacing',\n    'lineHeight',\n    'textShadowRadius',\n  ];\n\n  for (const prop of NUMERIC_STYLES) {\n    const processNumericStyle = (value: any): any => {\n      if (\n        typeof value === 'string' &&\n        // Yoga already supports percentages, but not for all numeric properties.\n        !value.endsWith('%')\n      ) {\n        const [, parsedValue, unit] = value.match(/(\\d+)(\\w+)?/) ?? [];\n\n        // NOTE(EvanBacon): Maybe we should avoid parsing this as it adds overhead to every numeric property usage.\n        if (unit === 'px' || unit === undefined) {\n          // We can provide an easy conversion error for px (`20px`) and stringified (`100`) values.\n          const parsed = parseFloat(parsedValue);\n          console.error(\n            `Convert invalid CSS numeric property usage { ${prop}: \"${value}\" } to { ${prop}: ${parsed} }. This is a development error, production use may lead to fatal crashes.`\n          );\n          return parsed;\n        } else {\n          const warning = [\n            `Numeric CSS unit \"${unit}\" is not supported for property \"${prop}\" on ${PLATFORM_NAME}.`,\n            `style={{ ${prop}: '${value}' }}`,\n            `This is a development error, production use may lead to fatal crashes.`,\n          ];\n          console.error(warning.join('\\n'));\n        }\n        return undefined;\n      }\n      return value;\n    };\n\n    setStyleAttributePreprocessor(prop, processNumericStyle);\n  }\n}\n"]}