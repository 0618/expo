{"version":3,"file":"createHttpServer.js","sourceRoot":"","sources":["../../server/createHttpServer.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAqC;AACrC,8CAAwB;AACxB,oDAA8B;AAC9B,8CAAwB;AACxB,0CAAoB;AAGpB,mCAAsC;AAEtC,SAAS,gBAAgB,CAAC,MAAoB;IAC5C,IAAM,GAAG,GAAG,iBAAO,EAAE,CAAC;IAEtB,GAAG,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3B,GAAG,CAAC,GAAG,CAAC,cAAI,EAAE,CAAC,CAAC;IAEhB,IAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IACtC,IAAM,GAAG,GAAG,IAAI,YAAE,CAAC,MAAM,CAAC,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;IAEtC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,UAAC,GAAG,EAAE,GAAG;QAC3B,IAAM,OAAO,GAAG,mBAAU,CAAC,MAAM,CAAC,CAAC;QACnC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,UAAC,GAAG,EAAE,GAAG;QACtB,IAAA,KAAoB,GAAG,CAAC,IAAI,EAA1B,IAAI,UAAA,EAAE,OAAO,aAAa,CAAC;QAEnC,IAAI,IAAI,KAAK,aAAa,EAAE;YAC1B,OAAO;YACP,mCAAmC;YACnC,8CAA8C;YAC9C,uBAAuB;YACvB,oCAAoC;YACpC,2CAA2C;YAC3C,QAAQ;YACR,QAAQ;YACR,uCAAuC;YACvC,UAAU;YACV,IAAI;SACL;QAED,IAAI,IAAI,KAAK,YAAY,EAAE;YACzB,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;gBACxB,IAAI,MAAM,CAAC,UAAU,KAAK,YAAE,CAAC,IAAI,EAAE;oBACjC,OAAO;oBACP,kBAAkB;oBAClB,wBAAwB;oBACxB,KAAK;oBACL,sCAAsC;iBACvC;YACH,CAAC,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;YACpC,OAAO;SACR;QAED,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,4BAA4B,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,SAAS,KAAK;QACJ,IAAA,IAAI,GAAK,MAAM,KAAX,CAAY;QACxB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YAClB,OAAO,CAAC,GAAG,CAAC,mCAAiC,IAAM,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,cAAc;QACrB,OAAO;QACP,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;YACxB,IAAI,MAAM,CAAC,UAAU,KAAK,YAAE,CAAC,IAAI,EAAE;gBACjC,mCAAmC;gBACnC,4BAA4B;gBAC5B,wBAAwB;gBACxB,MAAM;gBACN,wBAAwB;aACzB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,OAAO;QACd,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAED,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC5B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAE5B,OAAO;QACL,KAAK,OAAA;QACL,cAAc,gBAAA;QACd,OAAO,SAAA;KACR,CAAC;AACJ,CAAC;AAEQ,4CAAgB","sourcesContent":["import bodyParser from 'body-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport http from 'http';\nimport ws from 'ws';\n\nimport { ServerConfig, StoryHttpServer } from '../types';\nimport { getStories } from './shared';\n\nfunction createHttpServer(config: ServerConfig): StoryHttpServer {\n  const app = express();\n\n  app.use(bodyParser.json());\n  app.use(cors());\n\n  const server = http.createServer(app);\n  const wss = new ws.Server({ server });\n\n  app.get('/stories', (req, res) => {\n    const stories = getStories(config);\n    res.json({ data: stories });\n  });\n\n  app.post(`/stories`, (req, res) => {\n    const { type, payload } = req.body;\n\n    if (type === 'selectStory') {\n      // TODO\n      // const storyId: string = payload;\n      // const selectedStory = storiesById[storyId];\n      // if (selectedStory) {\n      //   wss.clients.forEach(client => {\n      //     if (client.readyState === ws.OPEN) {\n      //     }\n      //   });\n      //   res.json({ data: selectedStory });\n      // return;\n      // }\n    }\n\n    if (type === 'clearStory') {\n      wss.clients.forEach(client => {\n        if (client.readyState === ws.OPEN) {\n          // TODO\n          // const event = {\n          //   type: 'clearStory',\n          // };\n          // client.send(JSON.stringify(event));\n        }\n      });\n\n      res.json({ data: 'Cleared story' });\n      return;\n    }\n\n    res.json({ data: 'Invalid story id provided!' });\n  });\n\n  function start() {\n    const { port } = config;\n    server.listen(port, () => {\n      console.log(`Listening on http://localhost:${port}`);\n    });\n  }\n\n  function refreshClients() {\n    // TODO\n    wss.clients.forEach(client => {\n      if (client.readyState === ws.OPEN) {\n        // const message = JSON.stringify({\n        //   type: 'refreshStories',\n        //   payload: undefined,\n        // });\n        // client.send(message);\n      }\n    });\n  }\n\n  function cleanup() {\n    server.close();\n    wss.close();\n  }\n\n  server.on('close', cleanup);\n  server.on('error', cleanup);\n\n  return {\n    start,\n    refreshClients,\n    cleanup,\n  };\n}\n\nexport { createHttpServer };\n"]}