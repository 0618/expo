{"version":3,"file":"writeStoriesFile.js","sourceRoot":"","sources":["../../server/writeStoriesFile.ts"],"names":[],"mappings":";;;;;;AAAA,0CAAoB;AACpB,8CAAwB;AAGxB,mCAA0D;AAE1D,SAAS,gBAAgB,CAAC,YAA2B;IACnD,IAAM,OAAO,GAAG,mBAAU,CAAC,YAAY,CAAC,CAAC;IAEzC,IAAI,QAAQ,GAAG,+CAET,kBAAkB,CAAC,OAAO,CAAC,mDAE9B,CAAC;IAEJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE;QAC3B,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE;YACpD,MAAM,EAAE,IAAI;SACb,CAAC,CAAC,IAAI,CAAC;KACT;IAED,IAAM,UAAU,GAAG,2BAAkB,CAAC,YAAY,CAAC,CAAC;IACpD,IAAM,iBAAiB,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACjE,YAAE,CAAC,aAAa,CAAC,iBAAiB,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;AACvE,CAAC;AAoCQ,4CAAgB;AAlCzB,SAAS,kBAAkB,CAAC,OAA6B;IACvD,OAAO,OAAO;SACX,GAAG,CAAC,UAAA,KAAK;QACR,OAAO,0BACQ,KAAK,CAAC,EAAE,yDACU,KAAK,CAAC,QAAQ,qGAEpB,KAAK,CAAC,EAAE,2NAMN,KAAK,CAAC,EAAE,iYAe/B,KAAK,CAAC,EAAE,sBACX,CAAC;IACN,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { IServerConfig, IStoryManifestItem } from '../types';\nimport { getStories, getStoriesCacheDir } from './shared';\n\nfunction writeStoriesFile(serverConfig: IServerConfig) {\n  const stories = getStories(serverConfig);\n\n  let template = `\n      const storiesToExport = {}\n      ${writeStoryRequires(stories)}\n      module.exports = storiesToExport\n    `;\n\n  if (!process.env.EXPO_DEBUG) {\n    template = require('esbuild').transformSync(template, {\n      minify: true,\n    }).code;\n  }\n\n  const storiesDir = getStoriesCacheDir(serverConfig);\n  const writeRequiresPath = path.resolve(storiesDir, 'stories.js');\n  fs.writeFileSync(writeRequiresPath, template, { encoding: 'utf-8' });\n}\n\nfunction writeStoryRequires(stories: IStoryManifestItem[]) {\n  return stories\n    .map(story => {\n      return `\n          function ${story.id}Setup() {\n            const stories = require(\"${story.fullPath}\")\n            const parentConfig = stories.default || {}\n            parentConfig.id = \"${story.id}\"\n\n            Object.keys(stories).forEach((key) => {\n              const Component = stories[key]\n              \n              if (typeof Component === \"function\") {\n                const storyId = \"${story.id}\" + \"_\" + key\n                \n                Component.storyConfig = {\n                  id: storyId,\n                  name: key,\n                  ...Component.storyConfig,\n                }\n\n                Component.parentConfig = parentConfig\n\n                storiesToExport[storyId] = Component \n              }\n            })\n          }\n\n          ${story.id}Setup()\n        `;\n    })\n    .join('\\n');\n}\n\nexport { writeStoriesFile };\n"]}