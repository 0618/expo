{"version":3,"file":"writeRequiredFiles.js","sourceRoot":"","sources":["../../server/writeRequiredFiles.ts"],"names":[],"mappings":";;;;;;AAAA,0CAAoB;AACpB,8CAAwB;AAGxB,mCAA8C;AAE9C,SAAS,kBAAkB,CAAC,MAAqB;IACvC,IAAA,WAAW,GAAsB,MAAM,YAA5B,EAAE,SAAS,GAAW,MAAM,UAAjB,EAAE,IAAI,GAAK,MAAM,KAAX,CAAY;IAEhD,IAAM,aAAa,GAAG,2BAAkB,CAAC,MAAM,CAAC,CAAC;IAEjD,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;QACjC,YAAE,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;KAClD;IAED,IAAM,eAAe,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IAElE,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;QACnC,YAAE,CAAC,aAAa,CAAC,eAAe,EAAE,qBAAqB,EAAE;YACvD,QAAQ,EAAE,OAAO;SAClB,CAAC,CAAC;KACJ;IAED,IAAM,mBAAmB,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;IAE9E,IAAI,YAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;QACtC,IAAM,aAAa,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAEnD,IAAI,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,aAAa,CAAC,WAAW,KAAK,WAAW,EAAE;YACtF,YAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;SACpC;KACF;IAED,IAAM,aAAa,GAAG;QACpB,SAAS,WAAA;QACT,IAAI,MAAA;QACJ,WAAW,aAAA;QACX,KAAK,EAAE,EAAE;KACV,CAAC;IAEF,IAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAExE,OAAO,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAE1C,YAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,qBAAqB,EAAE;QAC3D,QAAQ,EAAE,OAAO;KAClB,CAAC,CAAC;AACL,CAAC;AAEQ,gDAAkB","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { IServerConfig } from '../types';\nimport { getStoriesCacheDir } from './shared';\n\nfunction writeRequiredFiles(config: IServerConfig) {\n  const { projectRoot, watchRoot, port } = config;\n\n  const pathToStories = getStoriesCacheDir(config);\n\n  if (!fs.existsSync(pathToStories)) {\n    fs.mkdirSync(pathToStories, { recursive: true });\n  }\n\n  const pathToStoryFile = path.resolve(pathToStories, 'stories.js');\n\n  if (!fs.existsSync(pathToStoryFile)) {\n    fs.writeFileSync(pathToStoryFile, 'module.exports = {}', {\n      encoding: 'utf-8',\n    });\n  }\n\n  const pathToStoryManifest = path.resolve(pathToStories, 'storyManifest.json');\n\n  if (fs.existsSync(pathToStoryManifest)) {\n    const storyManifest = require(pathToStoryManifest);\n\n    if (storyManifest.watchRoot !== watchRoot || storyManifest.projectRoot !== projectRoot) {\n      fs.unlinkSync(pathToStoryManifest);\n    }\n  }\n\n  const emptyManifest = {\n    watchRoot,\n    port,\n    projectRoot,\n    files: {},\n  };\n\n  const emptyManifestAsString = JSON.stringify(emptyManifest, null, '\\t');\n\n  delete require.cache[pathToStoryManifest];\n\n  fs.writeFileSync(pathToStoryManifest, emptyManifestAsString, {\n    encoding: 'utf-8',\n  });\n}\n\nexport { writeRequiredFiles };\n"]}