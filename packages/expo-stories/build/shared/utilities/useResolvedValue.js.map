{"version":3,"file":"useResolvedValue.js","sourceRoot":"","sources":["../../../shared/utilities/useResolvedValue.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA+B;AAE/B,SAAgB,gBAAgB,CAAI,MAAwB;IACpD,IAAA,KAAoB,KAAK,CAAC,QAAQ,CAAe,IAAI,CAAC,EAArD,KAAK,QAAA,EAAE,QAAQ,QAAsC,CAAC;IACvD,IAAA,KAAoB,KAAK,CAAC,QAAQ,CAAW,IAAI,CAAC,EAAjD,KAAK,QAAA,EAAE,QAAQ,QAAkC,CAAC;IAEzD,KAAK,CAAC,SAAS,CAAC;QACd,IAAI,SAAS,GAAG,IAAI,CAAC;QAErB,MAAM,EAAE;aACL,IAAI,CAAC,UAAA,KAAK;YACT,IAAI,SAAS,EAAE;gBACb,QAAQ,CAAC,KAAK,CAAC,CAAC;aACjB;QACH,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,KAAK;YACV,IAAI,SAAS,EAAE;gBACb,QAAQ,CAAC,KAAK,CAAC,CAAC;aACjB;QACH,CAAC,CAAC,CAAC;QACL,OAAO;YACL,SAAS,GAAG,KAAK,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACxB,CAAC;AAxBD,4CAwBC","sourcesContent":["import * as React from 'react';\n\nexport function useResolvedValue<T>(method: () => Promise<T>): [T | null, Error | null] {\n  const [error, setError] = React.useState<Error | null>(null);\n  const [value, setValue] = React.useState<T | null>(null);\n\n  React.useEffect(() => {\n    let isMounted = true;\n\n    method()\n      .then(value => {\n        if (isMounted) {\n          setValue(value);\n        }\n      })\n      .catch(error => {\n        if (isMounted) {\n          setError(error);\n        }\n      });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return [value, error];\n}\n"]}