{"version":3,"file":"registerForPushNotificationsAsync.js","sourceRoot":"","sources":["../../../shared/api/registerForPushNotificationsAsync.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAoD;AAEpD,0EAA0E;AAC1E,gFAAgF;AAChF,gFAAgF;AAChF,IAAM,aAAa,GAAG,qCAAqC,CAAC;AAE5D,SAA8B,iCAAiC;;;;;wBAKrC,qBAAM,aAAa,CAAC,qBAAqB,EAAE,EAAA;;oBAArD,KAAK,GAAK,CAAA,SAA2C,CAAA,KAAhD;oBAEnB,6DAA6D;oBAC7D,OAAO,CAAC,GAAG,CAAC,mCAAiC,KAAO,CAAC,CAAC;oBAGrC,qBAAM,KAAK,CAAC,aAAa,EAAE;4BAC1C,MAAM,EAAE,MAAM;4BACd,OAAO,EAAE;gCACP,MAAM,EAAE,kBAAkB;gCAC1B,cAAc,EAAE,kBAAkB;6BACnC;4BACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gCACnB;oCACE,EAAE,EAAE,KAAK;oCACT,KAAK,EAAE,kBAAkB;oCACzB,IAAI,EAAE,6DAA6D;oCACnE,IAAI,EAAE,EAAE,OAAO,EAAE,aAAa,EAAE;oCAChC,UAAU,EAAE,SAAS;iCACtB;6BACF,CAAC;yBACH,CAAC,EAAA;;oBAfI,QAAQ,GAAG,SAef;oBAEa,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oBAA9B,MAAM,GAAG,SAAqB;oBACpC,IAAI,MAAM,CAAC,MAAM,EAAE;wBACjB,WAAiC,EAAb,KAAA,MAAM,CAAC,MAAM,EAAb,cAAa,EAAb,IAAa,EAAE;4BAAxB,KAAK;4BACd,OAAO,CAAC,IAAI,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;yBAC7D;qBACF;oBAEK,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC;oBAC7B,IAAI,QAAQ,EAAE;wBACN,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;wBAC5B,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;4BAC9B,IAAI,OAAO,CAAC,OAAO,EAAE;gCACnB,OAAO,CAAC,IAAI,CACV,iEAA+D,OAAO,CAAC,OAAO,CAAC,KAAO,CACvF,CAAC;6BACH;4BACD,IAAI,OAAO,CAAC,OAAO,EAAE;gCACnB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;6BAC/B;yBACF;qBACF;;;;;CACF;AAjDD,oDAiDC","sourcesContent":["import * as Notifications from 'expo-notifications';\n\n// In this test app we contact the Expo push service directly. You *never*\n// should do this in a real app. You should always store the push tokens on your\n// own server or use the local notification API if you want to notify this user.\nconst PUSH_ENDPOINT = 'https://expo.io/--/api/v2/push/send';\n\nexport default async function registerForPushNotificationsAsync() {\n  // this method assumes the user has already granted permission\n  // to receive remote notifications.\n\n  // Get the token that uniquely identifies this device\n  const { data: token } = await Notifications.getExpoPushTokenAsync();\n\n  // Log it so we can easily copy it if we need to work with it\n  console.log(`Got this device's push token: ${token}`);\n\n  // POST the token to the Expo push server\n  const response = await fetch(PUSH_ENDPOINT, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify([\n      {\n        to: token,\n        title: 'Welcome to Expo!',\n        body: 'Native Component List is registered for push notifications.',\n        data: { example: 'sample data' },\n        categoryId: 'welcome',\n      },\n    ]),\n  });\n\n  const result = await response.json();\n  if (result.errors) {\n    for (const error of result.errors) {\n      console.warn(`API error sending push notification:`, error);\n    }\n  }\n\n  const receipts = result.data;\n  if (receipts) {\n    const receipt = receipts[0];\n    if (receipt.status === 'error') {\n      if (receipt.details) {\n        console.warn(\n          `Expo push service reported an error sending a notification: ${receipt.details.error}`\n        );\n      }\n      if (receipt.__debug) {\n        console.warn(receipt.__debug);\n      }\n    }\n  }\n}\n"]}