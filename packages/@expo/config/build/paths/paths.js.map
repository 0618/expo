{"version":3,"file":"paths.js","names":["nativePlatforms","resolveEntryPoint","projectRoot","platform","pkg","platforms","includes","extensions","getBareExtensions","getEntryPointWithExtensions","getPackageJson","main","entry","getFileWithExtensions","resolveFromSilentWithExtensions","Error","resolveFrom","fromDirectory","moduleId","extension","modulePath","silent","endsWith","path","join","fs","existsSync"],"sources":["../../src/paths/paths.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { getPackageJson } from '../Config';\nimport { PackageJSONConfig } from '../Config.types';\nimport { getBareExtensions } from './extensions';\n\nconst nativePlatforms = ['ios', 'android'];\n\nexport function resolveEntryPoint(\n  projectRoot: string,\n  { platform, pkg }: { platform: string; pkg?: PackageJSONConfig }\n): string {\n  const platforms = nativePlatforms.includes(platform) ? [platform, 'native'] : [platform];\n  const extensions = getBareExtensions(platforms);\n  return getEntryPointWithExtensions(projectRoot, { extensions, pkg });\n}\n\n// Used to resolve the main entry file for a project.\nexport function getEntryPointWithExtensions(\n  projectRoot: string,\n  {\n    extensions,\n    pkg = getPackageJson(projectRoot),\n  }: {\n    extensions: string[];\n    pkg?: PackageJSONConfig;\n  }\n): string {\n  // If the config doesn't define a custom entry then we want to look at the `package.json`s `main` field, and try again.\n  const { main } = pkg;\n  if (main && typeof main === 'string') {\n    // Testing the main field against all of the provided extensions - for legacy reasons we can't use node module resolution as the package.json allows you to pass in a file without a relative path and expect it as a relative path.\n    let entry = getFileWithExtensions(projectRoot, main, extensions);\n    if (!entry) {\n      // Allow for paths like: `{ \"main\": \"expo/AppEntry\" }`\n      entry = resolveFromSilentWithExtensions(projectRoot, main, extensions);\n      if (!entry)\n        throw new Error(\n          `Cannot resolve entry file: The \\`main\\` field defined in your \\`package.json\\` points to an unresolvable or non-existent path.`\n        );\n    }\n    return entry;\n  }\n\n  // Check for a root index.* file in the project root.\n  const entry = resolveFromSilentWithExtensions(projectRoot, './index', extensions);\n  if (entry) {\n    return entry;\n  }\n\n  try {\n    // If none of the default files exist then we will attempt to use the main Expo entry point.\n    // This requires `expo` to be installed in the project to work as it will use `node_module/expo/AppEntry.js`\n    // Doing this enables us to create a bare minimum Expo project.\n\n    // TODO(Bacon): We may want to do a check against `./App` and `expo` in the `package.json` `dependencies` as we can more accurately ensure that the project is expo-min without needing the modules installed.\n    return resolveFrom(projectRoot, 'expo/AppEntry');\n  } catch {\n    throw new Error(\n      `The project entry file could not be resolved. Please define it in the \\`main\\` field of the \\`package.json\\`, create an \\`index.js\\`, or install the \\`expo\\` package.`\n    );\n  }\n}\n\n// Resolve from but with the ability to resolve like a bundler\nfunction resolveFromSilentWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  for (const extension of extensions) {\n    const modulePath = resolveFrom.silent(fromDirectory, `${moduleId}.${extension}`);\n    if (modulePath && modulePath.endsWith(extension)) {\n      return modulePath;\n    }\n  }\n  return resolveFrom.silent(fromDirectory, moduleId) || null;\n}\n\n// Statically attempt to resolve a module but with the ability to resolve like a bundler.\n// This won't use node module resolution.\nexport function getFileWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  const modulePath = path.join(fromDirectory, moduleId);\n  if (fs.existsSync(modulePath)) {\n    return modulePath;\n  }\n  for (const extension of extensions) {\n    const modulePath = path.join(fromDirectory, `${moduleId}.${extension}`);\n    if (fs.existsSync(modulePath)) {\n      return modulePath;\n    }\n  }\n  return null;\n}\n"],"mappings":"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"}